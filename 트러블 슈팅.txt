트러블 슈팅

1. 작업 전 상태 보기, 인벤토리같은 기본적인 코드를 전 프로젝트에서 가져왔는데,
한 파일에 모든 클래스가 모여있어 난잡함
-> 클래스별로 파일을 나눠 진행

2. 깃허브에 프로젝트 파일을 올려도 솔루션파일이 보이지 않아 코드를 빌딩할 수 없음.
-> .gitignore 파일에 .sln옵션이 들어가 있었고, gitignore을 C#전용으로 변경 후 솔루션 업로드.

3. 머지 중 충돌이 발생해 코드가 정상적으로 올라가지 않음.
-> 각자 작업중인 파일의 이름을 기록해놓고, 최대한 작업파일이 겹치지 않도록 함.
-> 다른 사람이 작업중인것의 다음 동작을 구현하고 있고, 둘이 똑같은 파일을 써야한다면, 테스트용으로 프로젝트를 따로 만들어 구현해 사용
-> 만약 본인이 main에 무언가 머지할 것이라면, 꼭 마이크를 키고 머지했다고 말한 뒤, 최신화&본인 브랜치에 머지 요청

4. 직업 별 스테이터스 데이터를 바꿔서 적용하려고 하는데, 단순 if문을 사용하자 겉잡을 수 없을 정도로 긴 구조의 조건문이 탄생함
 ->Enum으로 만들었던 직업리스트를 이용하여, Key값에 해당 리스트를 넣은 Dictionary 생성.
-> 새로운 구조체, Stats를 생성하여 캡슐화.
-> Dictionary의 value에 각 직업별 새 Stats를 할당하여 완성함.
-> 캐릭터 생성 메서드에서 직업 선택 시 입력받은 값에 해당하는 직업데이터를 Key로 이용. 해당 Key에 따른 Stats를 불러와 character 능력치에 부여함.